const axios = require('axios');

exports.callGeminiAPI = async (text) => {
  const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${process.env.GEMINI_API_KEY}`;
  
  const prompt = `
You are an AI content detection model. Analyze the following academic text and identify sentences that appear to be generated by a large language model.

Provide your analysis as a single JSON object with the following structure:
{
  "ai_percentage": (integer 0-100),
  "human_percentage": (integer 0-100),
  "summary": "A concise summary explaining which parts are likely AI-generated and why.",
  "metadata_score": (integer 0-100),
  "linguistic_score": (integer 0-100),
  "pixel_inconsistency_score": (integer 0-100),
  "ai_generated_sentences": [
    "Most illustrative AI-like sentence 1", 
    "Sentence 2"
  ],
  "source": "A comma-separated list of the 5 to 10 most AI-likely words or phrases (tokens) identified in the content. For example: 'revolutionary, dynamic, cutting-edge, streamline operations, holistic approach'.",
  "detailed_explanation": "A detailed paragraph explaining *why* the scores were assigned, pointing out specific linguistic evidence like 'generic statements about agriculture' or 'frequent use of clich√© phrases.'"
}
IMPORTANT:
- Always round ai_percentage to the nearest 5 (e.g., 0, 5, 10, 15... 100).
- Ensure consistency: The same input should always return the same ai_percentage.
- Do not randomly vary percentages.
TEXT TO ANALYZE:
${text.slice(0,2000)} // limit text length for token safety
`;

  try {
    const res = await axios.post(url, {
      contents: [{ parts: [{ text: prompt }] }]
    });

    let raw = res.data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

    // Remove Markdown if present
    if (raw.startsWith("```")) {
      raw = raw.replace(/```json|```/g, "").trim();
    }

    return JSON.parse(raw);
  } catch (err) {
    console.error("Gemini API ERROR:");
    if (err.response) {
      console.error("Status:", err.response.status);
      console.error("Data:", err.response.data);
    } else {
      console.error("Message:", err.message);
    }
    throw new Error("Gemini API failed or returned invalid JSON");
  }
};

